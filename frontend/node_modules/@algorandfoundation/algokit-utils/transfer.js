"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ensureFunded = exports.transferAlgos = void 0;
const algosdk_1 = __importDefault(require("algosdk"));
const _1 = require("./");
const transaction_1 = require("./transaction");
/**
 * Transfer ALGOs between two accounts.
 * @param transfer The transfer definition
 * @param algod An algod client
 * @returns The transaction object and optionally the confirmation if it was sent to the chain (`skipSending` is `false` or unset)
 */
async function transferAlgos(transfer, algod) {
    const { from, to, amount, note, transactionParams, ...sendParams } = transfer;
    const transaction = algosdk_1.default.makePaymentTxnWithSuggestedParamsFromObject({
        from: (0, transaction_1.getSenderAddress)(from),
        to: typeof to === 'string' ? to : (0, transaction_1.getSenderAddress)(to),
        amount: amount.microAlgos,
        note: (0, transaction_1.encodeTransactionNote)(note),
        suggestedParams: await (0, transaction_1.getTransactionParams)(transactionParams, algod),
        closeRemainderTo: undefined,
        rekeyTo: undefined,
    });
    if (!sendParams.skipSending) {
        _1.Config.getLogger(sendParams.suppressLog).debug(`Transferring ${amount.microAlgos}ÂµALGOs from ${(0, transaction_1.getSenderAddress)(from)} to ${to}`);
    }
    return (0, transaction_1.sendTransaction)({ transaction, from, sendParams }, algod);
}
exports.transferAlgos = transferAlgos;
/**
 * Funds a given account using a funding source such that it has a certain amount of algos free to spend (accounting for ALGOs locked in minimum balance requirement).
 *
 * https://developer.algorand.org/docs/get-details/accounts/#minimum-balance
 *
 * @param funding The funding configuration
 * @param algod An algod client
 * @param kmd An optional kmd client
 * @returns undefined if nothing was needed or the transaction send result
 */
async function ensureFunded(funding, algod, kmd) {
    const { accountToFund, fundingSource, minSpendingBalance, minFundingIncrement, transactionParams, note, ...sendParams } = funding;
    const addressToFund = typeof accountToFund === 'string' ? accountToFund : (0, transaction_1.getSenderAddress)(accountToFund);
    const accountInfo = await algod.accountInformation(addressToFund).do();
    const balance = Number(accountInfo.amount);
    const minimumBalanceRequirement = (0, _1.microAlgos)(Number(accountInfo['min-balance']));
    const currentSpendingBalance = (0, _1.microAlgos)(balance - minimumBalanceRequirement.microAlgos);
    if (minSpendingBalance > currentSpendingBalance) {
        const from = fundingSource ?? (await (0, _1.getDispenserAccount)(algod, kmd));
        const minFundAmount = (0, _1.microAlgos)(minSpendingBalance.microAlgos - currentSpendingBalance.microAlgos);
        const fundAmount = (0, _1.microAlgos)(Math.max(minFundAmount.microAlgos, minFundingIncrement?.microAlgos ?? 0));
        _1.Config.getLogger(sendParams.suppressLog).info(`Funding ${addressToFund} ${fundAmount} from ${(0, transaction_1.getSenderAddress)(from)} to reach minimum spend amount of ${minSpendingBalance} (balance = ${balance}, min_balance_req = ${minimumBalanceRequirement})`);
        return await transferAlgos({
            from,
            to: addressToFund,
            note: note ?? 'Funding account to meet minimum requirement',
            amount: fundAmount,
            transactionParams,
            ...sendParams,
        }, algod);
    }
    return undefined;
}
exports.ensureFunded = ensureFunded;
//# sourceMappingURL=transfer.js.map