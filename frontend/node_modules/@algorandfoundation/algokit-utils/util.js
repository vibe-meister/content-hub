"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UnsafeConversionError = exports.toNumber = void 0;
/**
 * Converts a value which might be a number or a bigint into a number to be used with apis that don't support bigint.
 *
 * Throws an UnsafeConversionError if the conversion would result in an unsafe integer for the Number type
 * @param value
 */
const toNumber = (value) => {
    if (typeof value === 'number')
        return value;
    if (value > BigInt(Number.MAX_SAFE_INTEGER)) {
        throw new UnsafeConversionError(`Cannot convert ${value} to a Number as it is larger than the maximum safe integer the Number type can hold.`);
    }
    else if (value < BigInt(Number.MIN_SAFE_INTEGER)) {
        throw new UnsafeConversionError(`Cannot convert ${value} to a Number as it is smaller than the minimum safe integer the Number type can hold.`);
    }
    return Number(value);
};
exports.toNumber = toNumber;
class UnsafeConversionError extends Error {
}
exports.UnsafeConversionError = UnsafeConversionError;
//# sourceMappingURL=util.js.map